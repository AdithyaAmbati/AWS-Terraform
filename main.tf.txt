resource "aws_vpc" "myvpc" {
  cidr_block = var.cidr
}

resource "aws_subnet" "subnet1" {
  vpc_id = aws_vpc.myvpc.id
  cidr_block = "10.0.0.0/24"
  availability_zone ="eu-north-1a"
  map_public_ip_on_launch = true

}

resource "aws_subnet" "subnet2" {
  vpc_id = aws_vpc.myvpc.id
  cidr_block = "10.0.1.0/24"
  availability_zone ="eu-north-1b"
  map_public_ip_on_launch = true

}

resource "aws_internet_gateway" "igw" {
  vpc_id = aws_vpc.myvpc.id

}

resource "aws_route_table" "myrt" {
  vpc_id = aws_vpc.myvpc.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.igw.id
  }

resource "aws_security_group" "mysg" {
  name        = "my-security-group"
  description = "Allow inbound SSH and HTTP traffic"

  ingress {
    from_port = 22
    to_port   = 22
    protocol  = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port = 80
    to_port   = 80
    protocol  = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port = 0
    to_port   = 0
    protocol  = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

# Create an S3 bucket
resource "aws_s3_bucket" "mybucket" {
  bucket = "mybucketname"  
  acl    = "private"
}

# Create two EC2 instances
resource "aws_instance" "webserver1" {
  ami           = "ami-xxxxxxxxxxxxxxxx"  
  instance_type = "t2.micro"
  key_name      = "mykeypair1.pem"    

  security_group = [aws_security_group.mysg.id]

  
}

resource "aws_instance" "webserver2" {
  ami           = "ami-xxxxxxxxxxxxxxxx"  
  instance_type = "t2.micro"
  key_name      = "myketpair1.pem"    

  security_group = [aws_security_group.mysg.id]

  
}